{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Kick A project template tool that stores project templates in git repositories Introduction kick is a project template tool, some of its features are... the ability to install templates using a git URL the use of a directory path as template use pre existing projects as templates create a repository of templates simple key/value pair or environment variables as template variables bash style template variables Examples: $variable ${variable} Examples Installing templates directly from git kick install gem git@github.com:kick-project/template-gem.git # Install a gem template kick install go git@github.com:kick-project/template-go.git # Install a go template kick install pypi git@github.com:kick-project/template-pypi.git # Install a pypi template kick install project_handle git@example.com:your/git/project.git # Install a custom template for git Use a local directory as a template kick install mytemplate ~/template_directory/mytemplate # Install a custom template from disk Starting a project kick start gem ~/workspace/mygemproject kick start go ~/workspace/mygoproject kick start pypi ~/workspace/mypypiproject kick start mytemplate ~/myproject # Or simply to create a project in the currrent directory kick start mytemplate myproject Search and install templates from a repo # Search for a template kick search tmpl +-------------+---------------------------------+ | TEMPLATE | LOCATION | +-------------+---------------------------------+ | tmpl/repo1 | http://gitservice.com/tmpl.git | | tmpl1/repo1 | http://gitservice.com/tmpl1.git | | tmpl2/repo1 | http://gitservice.com/tmpl2.git | +-------------+---------------------------------+ # Install template using <template> name kick install mytmpl tmpl # Install template using <template>/<repo> name kick install mytmpl1 tmpl1/repo1 Its that Simple! If you would like to see more, head on over to the install & quick start sections","title":"home"},{"location":"#kick","text":"A project template tool that stores project templates in git repositories","title":"Kick"},{"location":"#introduction","text":"kick is a project template tool, some of its features are... the ability to install templates using a git URL the use of a directory path as template use pre existing projects as templates create a repository of templates simple key/value pair or environment variables as template variables bash style template variables Examples: $variable ${variable}","title":"Introduction"},{"location":"#examples","text":"Installing templates directly from git kick install gem git@github.com:kick-project/template-gem.git # Install a gem template kick install go git@github.com:kick-project/template-go.git # Install a go template kick install pypi git@github.com:kick-project/template-pypi.git # Install a pypi template kick install project_handle git@example.com:your/git/project.git # Install a custom template for git Use a local directory as a template kick install mytemplate ~/template_directory/mytemplate # Install a custom template from disk Starting a project kick start gem ~/workspace/mygemproject kick start go ~/workspace/mygoproject kick start pypi ~/workspace/mypypiproject kick start mytemplate ~/myproject # Or simply to create a project in the currrent directory kick start mytemplate myproject Search and install templates from a repo # Search for a template kick search tmpl +-------------+---------------------------------+ | TEMPLATE | LOCATION | +-------------+---------------------------------+ | tmpl/repo1 | http://gitservice.com/tmpl.git | | tmpl1/repo1 | http://gitservice.com/tmpl1.git | | tmpl2/repo1 | http://gitservice.com/tmpl2.git | +-------------+---------------------------------+ # Install template using <template> name kick install mytmpl tmpl # Install template using <template>/<repo> name kick install mytmpl1 tmpl1/repo1 Its that Simple! If you would like to see more, head on over to the install & quick start sections","title":"Examples"},{"location":"cli/","text":"Use & manage templates kick start generate project scaffolding Usage: kick start <handle> <project> kick start (-l|--long) Options: -h --help print help --long list templates in long format <handle> template handle <project> project path kick install Install template Usage: kick install <handle> <location> Options: -h --help print help <handle> name to use when creating new projects <location> template name, URL or location of template kick remove Remove an installed template Usage: kick remove <handle> Options: -h --help print help <handle> handle to remove kick search search for templates using a keyword Usage: kick search [-l] [<term>] Options: -h --help print help -l long output <term> search term Management commands kick setup initialize configuration Usage: kick setup Options: -h --help print help Repository management kick repo Buid/list/inform on repositories WIP Usage: kick repo build kick repo list kick repo info <repo> Options: -h --help print help repo repo subcommand build build repo by downloading the URLS defined in repo.yml and creating the files templates/*.yml list list repositories info repository and/or template information <repo> name of repository kick init Create a repo or template Usage: kick init repo <name> [<path>] kick init template <name> [<path>] Options: -h --help print help repo create repository template create a template <name> template or repo name <path> directory path. if not set creates files in working directory","title":"cli"},{"location":"cli/#use-manage-templates","text":"","title":"Use &amp; manage templates"},{"location":"cli/#kick-start","text":"generate project scaffolding Usage: kick start <handle> <project> kick start (-l|--long) Options: -h --help print help --long list templates in long format <handle> template handle <project> project path","title":"kick start"},{"location":"cli/#kick-install","text":"Install template Usage: kick install <handle> <location> Options: -h --help print help <handle> name to use when creating new projects <location> template name, URL or location of template","title":"kick install"},{"location":"cli/#kick-remove","text":"Remove an installed template Usage: kick remove <handle> Options: -h --help print help <handle> handle to remove","title":"kick remove"},{"location":"cli/#kick-search","text":"search for templates using a keyword Usage: kick search [-l] [<term>] Options: -h --help print help -l long output <term> search term","title":"kick search"},{"location":"cli/#management-commands","text":"","title":"Management commands"},{"location":"cli/#kick-setup","text":"initialize configuration Usage: kick setup Options: -h --help print help","title":"kick setup"},{"location":"cli/#repository-management","text":"","title":"Repository management"},{"location":"cli/#kick-repo","text":"Buid/list/inform on repositories WIP Usage: kick repo build kick repo list kick repo info <repo> Options: -h --help print help repo repo subcommand build build repo by downloading the URLS defined in repo.yml and creating the files templates/*.yml list list repositories info repository and/or template information <repo> name of repository","title":"kick repo"},{"location":"cli/#kick-init","text":"Create a repo or template Usage: kick init repo <name> [<path>] kick init template <name> [<path>] Options: -h --help print help repo create repository template create a template <name> template or repo name <path> directory path. if not set creates files in working directory","title":"kick init"},{"location":"install/","text":"Installation MacOS homebrew wget https://github.com/kick-project/kick/releases/download/v1.0.0/kick.rb brew install kick.rb Linux homebrew wget https://github.com/kick-project/kick/releases/download/v1.0.0/kick.rb brew install kick.rb dpkg wget https://github.com/kick-project/kick/releases/download/v1.0.0/kick_1.0.0_amd64.deb dpkg -i ./kick_1.0.0_amd64.deb rpm rpm -ivh https://github.com/kick-project/kick/releases/download/v1.0.0/kick-1.0.0.x86_64.rpm Go CLI go install Requires go 1.16 or later go install github.com/kick-project/kick/cmd/kick@v1.0.0 go get For version 1.15.x go get -u github.com/kick-project/kick/cmd/kick","title":"installation"},{"location":"install/#installation","text":"","title":"Installation"},{"location":"install/#macos","text":"","title":"MacOS"},{"location":"install/#homebrew","text":"wget https://github.com/kick-project/kick/releases/download/v1.0.0/kick.rb brew install kick.rb","title":"homebrew"},{"location":"install/#linux","text":"","title":"Linux"},{"location":"install/#homebrew_1","text":"wget https://github.com/kick-project/kick/releases/download/v1.0.0/kick.rb brew install kick.rb","title":"homebrew"},{"location":"install/#dpkg","text":"wget https://github.com/kick-project/kick/releases/download/v1.0.0/kick_1.0.0_amd64.deb dpkg -i ./kick_1.0.0_amd64.deb","title":"dpkg"},{"location":"install/#rpm","text":"rpm -ivh https://github.com/kick-project/kick/releases/download/v1.0.0/kick-1.0.0.x86_64.rpm","title":"rpm"},{"location":"install/#go-cli","text":"","title":"Go CLI"},{"location":"install/#go-install","text":"Requires go 1.16 or later go install github.com/kick-project/kick/cmd/kick@v1.0.0","title":"go install"},{"location":"install/#go-get","text":"For version 1.15.x go get -u github.com/kick-project/kick/cmd/kick","title":"go get"},{"location":"quickstart/","text":"Quick Start Project templates Project templates are folders that contain other directories and files. Given the following directory tree, lets create a Project Template which contains the same files and folders. mytemplate \u251c\u2500\u2500 cmd \u2502 \u2514\u2500\u2500 ${PROJECT_NAME} \u2502 \u2514\u2500\u2500 main.go \u251c\u2500\u2500 docs \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 README.md \u2514\u2500\u2500 scripts \u2514\u2500\u2500 ${PROJECT_NAME}.sh Create a folder to hold templates. mkdir ~/templates cd ~/templates Create the Project Template mytemplate . mkdir mytemplate mkdir -p 'mytemplate/cmd/${PROJECT_NAME}/' touch 'mytemplate/cmd/${PROJECT_NAME}/main.go' # Create git ignore cat <<'EOF' > mytemplate/.gitignore .DS_Store # MacOS files .*.swp # Vim buffer file EOF touch mytemplate/README.md mkdir -p mytemplate/docs mkdir -p mytemplate/scripts touch 'mytemplate/scripts/${PROJECT_NAME}.sh' Verify that the structure matches the layout above. tree -an mytemplate mytemplate \u251c\u2500\u2500 cmd \u2502 \u2514\u2500\u2500 ${PROJECT_NAME} \u2502 \u2514\u2500\u2500 main.go \u251c\u2500\u2500 docs \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 README.md \u2514\u2500\u2500 scripts \u2514\u2500\u2500 ${PROJECT_NAME}.sh Examine the .gitignore file in your project. cat mytemplate/.gitignore Install the template using kick by specifying the path to the mytemplate directory. In the example below we will use the handle of myhandle . kick install myhandle ~/templates/mytemplate To see the installed template run the kick start -l or kick start --long . kick start --long +----------+----------+-------------+------------------------------------+ | HANDLE | TEMPLATE | DESCRIPTION | LOCATION | +----------+----------+-------------+------------------------------------+ | myhandle | - | - | /home/vagrant/templates/mytemplate | +----------+----------+-------------+------------------------------------+ Create a projects directory to create new projects. mkdir ~/projects Lets now use myhandle to create directories kick start myhandle ~/projects/myproject Upon examining the folder tree, one will see that any file or folder using the variable ${PROJECT_NAME} has been replaced with myproject . Any file or folder that contains a variable in its name will be interpolated by the variables value. cd ~/projects tree -an myproject myproject \u251c\u2500\u2500 cmd \u2502 \u2514\u2500\u2500 myproject \u2502 \u2514\u2500\u2500 main.go \u251c\u2500\u2500 docs \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 README.md \u2514\u2500\u2500 scripts \u2514\u2500\u2500 myproject.sh 4 directories, 4 files Variables Variables are either... predefined variables environment variables variables stored in ~/.env The order of precedence is as above. The variables stored in ~/.env are key value pairs and take the form key=value . Create some environment variables which will be used later. Using your favorite editor add the following variables to ~/.env author=\"JOHN SMITH\" email=john.smith@email.com NOTE: The ~/.env file isn't just for the kick utility but can be used by any other program in the same way that ~/.profile is not for just one tool. Template files Templates files are any text file which contains a modeline. A modeline is a piece of text that informs kick that the file is a template. A modeline takes up the form kick:render and should be placed within the first 5 lines of a text file. Modeline lines are stripped from the file and can be placed inside any comment type. Example modlines kick:render # kick:render // kick:render <!--- kick:render --> The next exercise is to add 4 template variables to the README.md file in our template. ${PROJECT_NAME} - Predefined variable ${USER} - Environment variable built into shells (E.G. Bash) which contains the current username. ${author} - Variable from \"~/.env\" ${email} - Variable from \"~/.env\" Change the contents of the ~/templates/mytemplate/README.md by cutting and pasting the whole text below... cat <<'EOF' > ~/templates/mytemplate/README.md <!--- kick:render --> # ${PROJECT_NAME} AUTHOR: ${author} EMAIL: ${email} USER: ${USER} Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. EOF Create a new project using the same handle myhandle ... kick start myhandle ~/projects/project2 Inspect the contents of the README.md file. cat ~/projects/project2/README.md # project2 AUTHOR: JOHN SMITH EMAIL: john.smith@email.com USER: vagrant Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Git Project Templates Kick can use remote git repositories as stores for project templates. Using our freshly minted project template we can upload this to a git repository and use kick install to install the directory. Create a git repository and upload it to a remote repository. cd ~/templates/mytemplate git init git add . git commit -m 'Initial commit' git remote add origin git@github.com/username/mytemplate.git git push -u origin master Remove the old handle kick remove mytemplate Add a remote location kick install mytemplate git@github.com/username/mytemplate.git Start a new project kick start mytemplate ~/project/project3 If you would like to find out how to create a repository of project templates, head to the repositories section.","title":"quick start"},{"location":"quickstart/#quick-start","text":"","title":"Quick Start"},{"location":"quickstart/#project-templates","text":"Project templates are folders that contain other directories and files. Given the following directory tree, lets create a Project Template which contains the same files and folders. mytemplate \u251c\u2500\u2500 cmd \u2502 \u2514\u2500\u2500 ${PROJECT_NAME} \u2502 \u2514\u2500\u2500 main.go \u251c\u2500\u2500 docs \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 README.md \u2514\u2500\u2500 scripts \u2514\u2500\u2500 ${PROJECT_NAME}.sh Create a folder to hold templates. mkdir ~/templates cd ~/templates Create the Project Template mytemplate . mkdir mytemplate mkdir -p 'mytemplate/cmd/${PROJECT_NAME}/' touch 'mytemplate/cmd/${PROJECT_NAME}/main.go' # Create git ignore cat <<'EOF' > mytemplate/.gitignore .DS_Store # MacOS files .*.swp # Vim buffer file EOF touch mytemplate/README.md mkdir -p mytemplate/docs mkdir -p mytemplate/scripts touch 'mytemplate/scripts/${PROJECT_NAME}.sh' Verify that the structure matches the layout above. tree -an mytemplate mytemplate \u251c\u2500\u2500 cmd \u2502 \u2514\u2500\u2500 ${PROJECT_NAME} \u2502 \u2514\u2500\u2500 main.go \u251c\u2500\u2500 docs \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 README.md \u2514\u2500\u2500 scripts \u2514\u2500\u2500 ${PROJECT_NAME}.sh Examine the .gitignore file in your project. cat mytemplate/.gitignore Install the template using kick by specifying the path to the mytemplate directory. In the example below we will use the handle of myhandle . kick install myhandle ~/templates/mytemplate To see the installed template run the kick start -l or kick start --long . kick start --long +----------+----------+-------------+------------------------------------+ | HANDLE | TEMPLATE | DESCRIPTION | LOCATION | +----------+----------+-------------+------------------------------------+ | myhandle | - | - | /home/vagrant/templates/mytemplate | +----------+----------+-------------+------------------------------------+ Create a projects directory to create new projects. mkdir ~/projects Lets now use myhandle to create directories kick start myhandle ~/projects/myproject Upon examining the folder tree, one will see that any file or folder using the variable ${PROJECT_NAME} has been replaced with myproject . Any file or folder that contains a variable in its name will be interpolated by the variables value. cd ~/projects tree -an myproject myproject \u251c\u2500\u2500 cmd \u2502 \u2514\u2500\u2500 myproject \u2502 \u2514\u2500\u2500 main.go \u251c\u2500\u2500 docs \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 README.md \u2514\u2500\u2500 scripts \u2514\u2500\u2500 myproject.sh 4 directories, 4 files","title":"Project templates"},{"location":"quickstart/#variables","text":"Variables are either... predefined variables environment variables variables stored in ~/.env The order of precedence is as above. The variables stored in ~/.env are key value pairs and take the form key=value . Create some environment variables which will be used later. Using your favorite editor add the following variables to ~/.env author=\"JOHN SMITH\" email=john.smith@email.com NOTE: The ~/.env file isn't just for the kick utility but can be used by any other program in the same way that ~/.profile is not for just one tool.","title":"Variables"},{"location":"quickstart/#template-files","text":"Templates files are any text file which contains a modeline. A modeline is a piece of text that informs kick that the file is a template. A modeline takes up the form kick:render and should be placed within the first 5 lines of a text file. Modeline lines are stripped from the file and can be placed inside any comment type. Example modlines kick:render # kick:render // kick:render <!--- kick:render --> The next exercise is to add 4 template variables to the README.md file in our template. ${PROJECT_NAME} - Predefined variable ${USER} - Environment variable built into shells (E.G. Bash) which contains the current username. ${author} - Variable from \"~/.env\" ${email} - Variable from \"~/.env\" Change the contents of the ~/templates/mytemplate/README.md by cutting and pasting the whole text below... cat <<'EOF' > ~/templates/mytemplate/README.md <!--- kick:render --> # ${PROJECT_NAME} AUTHOR: ${author} EMAIL: ${email} USER: ${USER} Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. EOF Create a new project using the same handle myhandle ... kick start myhandle ~/projects/project2 Inspect the contents of the README.md file. cat ~/projects/project2/README.md # project2 AUTHOR: JOHN SMITH EMAIL: john.smith@email.com USER: vagrant Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"Template files"},{"location":"quickstart/#git-project-templates","text":"Kick can use remote git repositories as stores for project templates. Using our freshly minted project template we can upload this to a git repository and use kick install to install the directory. Create a git repository and upload it to a remote repository. cd ~/templates/mytemplate git init git add . git commit -m 'Initial commit' git remote add origin git@github.com/username/mytemplate.git git push -u origin master Remove the old handle kick remove mytemplate Add a remote location kick install mytemplate git@github.com/username/mytemplate.git Start a new project kick start mytemplate ~/project/project3 If you would like to find out how to create a repository of project templates, head to the repositories section.","title":"Git Project Templates"},{"location":"repos/","text":"Repositories Repositories are git projects with yaml files that contain a set of URL locations within the repo. Making a Repository Create a template Download the example template mkdir -p ~/templates cd ~/templates wget http://github.com/kick-project/kick/releases/latest/website-template.tar.gz -O - | tar -zxvf - Initialize the template cd website-template kick init template website # <STDOUT> # generated repo.yml Initialize git, commit and push changes to a upstream repository cd website-template git init git add . git commit -m 'Initial commit' git remote add origin git@github.com/example/website-template.git git push --set-upstream origin master Create Repository mkdir ~/repos cd ~/repos mkdir myrepo cd myrepo kick init repo myrepo # <STDOUT> # generated repo.yml Modify repo.yml to include the new repository # repo.yml name: myrepo description: Repository myrepo templates: - git@github.com/example/website-template.git Build repository Build repository by running the kick repo build subcommand. This will clone the repositories defined under the templates section in the yaml file and copy the contents of .kick.yml into a subdirectory templates/ . Note that this step can also be performed manually by creating the files under templates/ . kick repo build","title":"repositories"},{"location":"repos/#repositories","text":"Repositories are git projects with yaml files that contain a set of URL locations within the repo.","title":"Repositories"},{"location":"repos/#making-a-repository","text":"","title":"Making a Repository"},{"location":"repos/#create-a-template","text":"Download the example template mkdir -p ~/templates cd ~/templates wget http://github.com/kick-project/kick/releases/latest/website-template.tar.gz -O - | tar -zxvf - Initialize the template cd website-template kick init template website # <STDOUT> # generated repo.yml Initialize git, commit and push changes to a upstream repository cd website-template git init git add . git commit -m 'Initial commit' git remote add origin git@github.com/example/website-template.git git push --set-upstream origin master","title":"Create a template"},{"location":"repos/#create-repository","text":"mkdir ~/repos cd ~/repos mkdir myrepo cd myrepo kick init repo myrepo # <STDOUT> # generated repo.yml Modify repo.yml to include the new repository # repo.yml name: myrepo description: Repository myrepo templates: - git@github.com/example/website-template.git","title":"Create Repository"},{"location":"repos/#build-repository","text":"Build repository by running the kick repo build subcommand. This will clone the repositories defined under the templates section in the yaml file and copy the contents of .kick.yml into a subdirectory templates/ . Note that this step can also be performed manually by creating the files under templates/ . kick repo build","title":"Build repository"}]}